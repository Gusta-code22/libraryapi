
# โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ
# ๐ณ DOCKERFILE PARA SPRING BOOT
# โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ

# Etapa de build com Maven
FROM maven:3.9.10-amazoncorretto-21-al2023 as build
WORKDIR /build

COPY . .

RUN mvn clean package -DskipTests

# Etapa de runtime com Amazon Corretto
FROM amazoncorretto:21.0.5

WORKDIR /app

COPY --from=build ./build/target/*.jar ./libraryapi.jar

EXPOSE 8080
EXPOSE 9090

ENV DATASOURCE_URL=''
ENV DATASOURCE_PASSWORD=''
ENV DATASOURCE_USERNAME=''
ENV GOOGLE_CLIENTID=''
ENV GOOGLE_CLIENT_SECRET=''
ENV GITHUB_CLIENT_SECRET=''
ENV GITHUB_CLIENTID=''

ENV SPRING_PROFILES_ACTIVE='production'
ENV TZ='America/Sao_Paulo'

ENTRYPOINT java -jar libraryapi.jar


# โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ
# ๐ป COMANDOS DOCKER
# โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ

# 1. Build da imagem local
docker build -t libraryapi .

# 2. Rodar container com variรกveis de ambiente
docker run -d -p 8080:8080 \
-e DATASOURCE_URL='jdbc:postgresql://<host>:5432/library_database_wtsq' \
-e DATASOURCE_USERNAME='library_database_wtsq_user' \
-e DATASOURCE_PASSWORD='SUA_SENHA' \
-e GOOGLE_CLIENTID='...' \
-e GOOGLE_CLIENT_SECRET='...' \
-e GITHUB_CLIENTID='...' \
-e GITHUB_CLIENT_SECRET='...' \
-e SPRING_PROFILES_ACTIVE='production' \
--name libraryapi_container libraryapi

# 3. Login no Docker Hub
docker login

# 4. Tag da imagem
docker tag libraryapi:latest SEU_USUARIO_DOCKERHUB/libraryapi:latest

# 5. Push para o Docker Hub
docker push SEU_USUARIO_DOCKERHUB/libraryapi:latest

# 6. (Opcional) Pull em outro host
docker pull SEU_USUARIO_DOCKERHUB/libraryapi:latest

# 7. (Opcional) Rodar container com imagem do Docker Hub
docker run -d -p 8080:8080 SEU_USUARIO_DOCKERHUB/libraryapi:latest
